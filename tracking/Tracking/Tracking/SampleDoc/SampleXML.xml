<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE stateProcess PUBLIC "" "http://cmseportal.redmond.corp.microsoft.com/SEPortalServices/Config/StateMachine.dtd">

<stateProcess>

  <namespace name="dbAccess" fullPath="SEPortal.SEPortalDataAccess" assemblyInfo="SEPortal.SEPortalDataAccess"/>
  <namespace name="data" fullPath="SEPortal.SEPortalData" assemblyInfo="SEPortal.SEPortalData"/>
  <namespace name="customDialogs" fullPath="SEPortal.SEPortalUI.CustomDialogs" assemblyInfo="SEPortal.SEPortalUI"/>
  <namespace name="serviceOperations" fullPath="SEPortal.SEPortalServices" assemblyInfo="SEPortal.SEPortalServices"/>
  <namespace name="smsCustomAction" fullPath="SMSCustomAction" assemblyInfo="http://smsse-redmond.redmond.corp.microsoft.com/SEPortalServices/dlls/SMSCustomAction.dll"/>
  
  <!-- The state of an instance when it is created-->
  <beginState stateName="Triage" />

  <!-- None-End States -->
  <states>

    <!-- Triage State -->
    <state stateName="Triage">
      <!-- RequireMoreInformation Event -> PendingMoreInfoProvided State -->
      <acceptableEvent eventName="RequireMoreInformation" nextStateName="Pending More Info Provided" visible="{Status}=='Active'" />
      <!-- AssignInvestigation Event -> Investigation State -->
      <acceptableEvent eventName="AssignInvestigation" nextStateName="Investigation" visible="{Status}=='Active'" />
      <!-- TriageVote Event -->
      <acceptableEvent eventName="TriageVote" nextStateName="Triage" visible="{Status}=='Active'" />
      <!-- RejectRFx Event -> RFxRejected State -->
      <acceptableEvent eventName="RejectRFx" nextStateName="RFx Rejected" visible="{Status}=='Active'" />
      <!-- AcceptRFC Event -> WorkingOnRFC State -->
      <acceptableEvent eventName="AcceptRFC" nextStateName="Working On RFC" visible="{Status}=='Active'" />
      <!-- AcceptRFH Event -> TestEnvironmentSetup State -->
      <acceptableEvent eventName="AcceptRFH" nextStateName="Working On Fix" visible="{Status}=='Active'" />
      <!-- UpdateBug event -->
      <acceptableEvent eventName="UpdateBug" nextStateName="Triage" />
    </state>

    <!-- PendingMoreInfoProvided State, PSS may not use this portal -->
    <state stateName="Pending More Info Provided">
      <!-- ProvideMoreInformation Event -> PreTriage State -->
      <acceptableEvent eventName="ProvideMoreInformation" nextStateName="Triage" visible="{Status}=='Active'" />
      <!-- UpdateBug event -->
      <acceptableEvent eventName="UpdateBug" nextStateName="Pending More Info Provided" />
    </state>

    <!-- Investigation State -->
    <state stateName="Investigation">
      <!-- AssignTriage Event -> Triage State -->
      <acceptableEvent eventName="AssignTriage" nextStateName="Triage" visible="{Status}=='Active'" />
      <!-- UpdateBug event -->
      <acceptableEvent eventName="UpdateBug" nextStateName="Investigation" />
    </state>

    <!-- WorkingOnRFC State -->
    <state stateName="Working On RFC">
      <!-- ResolveRFC Event -> RFCSolutionDelivered State -->
      <acceptableEvent eventName="ResolveRFC" nextStateName="RFC Solution Delivered" visible="{Status}=='Active'" />
      <!-- CreateKbArticle Event -->
      <acceptableEvent eventName="CreateKbArticle" nextStateName="Working On RFC" visible="{KbNumber} == '' &amp;&amp; {Status}=='Active'" />
      <!-- UpdateBug event -->
      <acceptableEvent eventName="UpdateBug" nextStateName="Working On RFC" />
    </state>

    <!-- WorkingOnFix State-->
    <state stateName="Working On Fix">
      <!-- ManageChangelist Event -->
      <acceptableEvent eventName="ManageChangelist" nextStateName="Working On Fix" visible="{Status}=='Active'" />
      <!-- PackCodeChange Event -->
      <acceptableEvent eventName="PackCodeChange" nextStateName="Working On Fix" visible="{PendingChangelist} != null &amp;&amp; {Status}=='Active'" />
      <!-- RequestCodeReview Event -> InCodeReview State -->
      <acceptableEvent eventName="RequestCodeReview" nextStateName="In Code Review" visible="{PendingChangelist} != null &amp;&amp; {CodeReviewFile} != '' &amp;&amp; {CodeReviewStatus} != 'CodeReviewPassed' &amp;&amp; {Status}=='Active'" />
      <!-- BundleHotFix Event -->
      <acceptableEvent eventName="PrivateBundle" nextStateName="Working On Fix" visible="{Status}=='Active'" />
      <!-- AssignPrivateTest Event -> InPrivateTest State -->
      <acceptableEvent eventName="AssignPrivateTest" nextStateName="In Private Test" visible="{PendingChangelist} != null &amp;&amp; {PrivateTestStatus} != 'Buddy Test Passed' &amp;&amp; {PrivateTestStatus} != 'Buddy Test Not Required' &amp;&amp; {Status}=='Active'" />
      <!-- SkipPrivateTest Event -->
      <acceptableEvent eventName="SkipPrivateTest" nextStateName="Working On Fix" visible="{PendingChangelist} != null &amp;&amp; {PrivateTestStatus} != 'Buddy Test Passed' &amp;&amp; {PrivateTestStatus} != 'Buddy Test Not Required' &amp;&amp; {Status}=='Active'" />
      <!-- AssignRegressionTest Event -> InRegressionTest State -->
      <acceptableEvent eventName="AssignRegressionTest" nextStateName="In Regression Test" visible="{PendingChangelist} != null &amp;&amp; {RegressionStatus} != 'Pass' &amp;&amp; {Status}=='Active'" />
      <!-- CreateKbArticle Event -->
      <acceptableEvent eventName="CreateKbArticle" nextStateName="Working On Fix" visible="{KbNumber} == '' &amp;&amp; {Status}=='Active'" />
      <!-- RequestCheckIn Event -->
      <acceptableEvent eventName="RequestCheckIn" nextStateName="Pending Check In" visible="{PendingChangelist} != null &amp;&amp; {CodeReviewStatus} == 'CodeReviewPassed'  &amp;&amp; ({PrivateTestStatus} == 'Buddy Test Passed' || {PrivateTestStatus} == 'Buddy Test Not Required') &amp;&amp; {KbNumber} != '' &amp;&amp; {Status}=='Active'"/>
      <!-- UpdateBug Event -->
      <acceptableEvent eventName="UpdateBug" nextStateName="Working On Fix" visible="{Status}=='Active'" />
    </state>
    
    <!-- InCodeReview State -->
    <state stateName="In Code Review">
      <!-- CodeReviewComplete Event -> WorkingOnFix State -->
      <acceptableEvent eventName="CodeReviewComplete" nextStateName="Working On Fix" visible="{Status}=='Active'" />
      <!-- UpdateBug Event -->
      <acceptableEvent eventName="UpdateBug" nextStateName="In Code Review" />
    </state>
    
    <!-- InPrivateTest State -->
    <state stateName="In Private Test">
      <!-- PrivateTestComplete Event -> WorkingOnFix State -->
      <acceptableEvent eventName="PrivateTestComplete" nextStateName="Working On Fix" visible="{Status}=='Active'" />
      <!-- UpdateBug Event -->
      <acceptableEvent eventName="UpdateBug" nextStateName="In Private Test" />
    </state>
    
    <!-- PendingCheckin State -->
    <state stateName="Pending Check In">
      <!-- Approve CheckIn Event -->
      <acceptableEvent eventName="ApproveCheckIn" nextStateName="Pending Check In" visible="{CheckinStatus} == 'Requested' &amp;&amp; {Status}=='Active'"/>
      <!-- Reject CheckIn Event -->
      <acceptableEvent eventName="RejectCheckIn" nextStateName="Working On Fix" visible="{CheckinStatus} == 'Requested' &amp;&amp; {Status}=='Active'"/>
      <!-- CheckIn Event -->
      <acceptableEvent eventName="CheckIn" nextStateName="Official Build" visible="{CheckinStatus} == 'Approved' &amp;&amp; {Status}=='Active'"/>
      <!-- UpdateBug Event -->
      <acceptableEvent eventName="UpdateBug" nextStateName="Pending Check In"/>
    </state>
    
    <!-- OfficialBuild State -->
    <state stateName="Official Build">
      <!-- AssignOfficialBundle Event -> OfficialBundle State -->
      <acceptableEvent eventName="AssignOfficialBundle" nextStateName="Official Bundle" visible="{Status}=='Resolved'" />
      <!-- BuildFail Event -> WorkingOnFix State -->
      <acceptableEvent eventName="BuildFail" nextStateName="Working On Fix" visible="{Status}=='Resolved'" />
      <!-- CreateKbArticle Event -->
      <acceptableEvent eventName="CreateKbArticle" nextStateName="Official Build" visible="{KbNumber} == '' &amp;&amp; {Status}=='Resolved'" />
      <!-- ModifyCheckInData Event-->
      <acceptableEvent eventName="ModifyCheckInData" nextStateName="Official Build" visible="{Status}=='Resolved'" />
      <!-- UpdateBug event -->
      <acceptableEvent eventName="UpdateBug" nextStateName="Official Build" />
    </state>

    <!-- OfficialBundle State -->
    <state stateName="Official Bundle">
      <!-- BundleHotFix Event -> OfficialBundle State -->
      <acceptableEvent eventName="BundleHotfix" nextStateName="Official Bundle" visible="{Status}=='Resolved'" />
      <!-- AssignBvtTest Event -> InBvtTest State -->
      <acceptableEvent eventName="AssignBvtTest" nextStateName="In Bvt Test" visible="{Status}=='Resolved'" />
      <!-- BundleFail Event -> OfficialBuild State -->
      <acceptableEvent eventName="BundleFail" nextStateName="Official Build" visible="{Status}=='Resolved'" />
      <!-- UpdateBug event -->
      <acceptableEvent eventName="UpdateBug" nextStateName="Official Bundle" />
    </state>

    <!-- InBvtTest State -->
    <state stateName="In Bvt Test">
      <!-- BvtTestFail Event -> WorkingOnFix State -->
      <acceptableEvent eventName="BvtTestFail" nextStateName="Working On Fix" visible="{Status}=='Resolved'" />
      <!-- AssignCodeSign Event -> InCodeSign State -->
      <acceptableEvent eventName="AssignCodeSign" nextStateName="In Code Sign" visible="{Status}=='Resolved'" />
      <!-- UpdateBug event -->
      <acceptableEvent eventName="UpdateBug" nextStateName="In Bvt Test" />
    </state>

    <!-- InRegressionTest State -->
    <state stateName="In Regression Test">
      <!-- RegressionTestComplete Event -> WorkingOnFix State -->
      <acceptableEvent eventName="RegressionTestComplete" nextStateName="Working On Fix" visible="{Status}=='Active'" />
      <!-- UpdateBug Event -->
      <acceptableEvent eventName="UpdateBug" nextStateName="In Regression Test" />
    </state>

    <!-- InCodeSign State -->
    <state stateName="In Code Sign">
      <!-- RequestCodeSign Event -->
      <acceptableEvent eventName="RequestCodeSign" nextStateName="In Code Sign" visible="{Status}=='Resolved'"/>
      <!-- CheckCodeSign Event -->
      <acceptableEvent eventName ="CheckCodeSign" nextStateName="In Code Sign" visible="{CodeSignRequestNumber} != '' &amp;&amp; {Status}=='Resolved'"/>
      <!-- AssignCustomerVerification Event -->
      <acceptableEvent eventName="AssignCustomerVerification" nextStateName="In Customer Verification" visible="{Status}=='Resolved'" />
      <!-- UpdateBug Event -->
      <acceptableEvent eventName="UpdateBug" nextStateName="In Code Sign" />
    </state>

    <!-- InCustomerVerification State -->
    <state stateName="In Customer Verification">
      <!-- CustomerVerificationFail Event -> WorkingOnFix State -->
      <acceptableEvent eventName="CustomerVerificationFail" nextStateName="Working On Fix" visible="{Status}=='Resolved'" />
      <!-- AssignOfficialRelease Event -> OfficialRelease State -->
      <acceptableEvent eventName="AssignOfficialRelease" nextStateName="Official Release" visible="{Status}=='Resolved'" />
      <!-- UpdateBug Event -->
      <acceptableEvent eventName="UpdateBug" nextStateName="In Customer Verification" />
    </state>

    <!-- OfficialRelease State -->
    <state stateName="Official Release">
      <!-- UploadHotfix Event -->
      <acceptableEvent eventName="UploadHotfix" nextStateName="Official Release" visible="{Status}=='Resolved'" />
      <!-- CloseRFx Event -> RFxClosed State -->
      <acceptableEvent eventName="CloseRFx" nextStateName="RFx Closed" visible="{Status}=='Resolved'" />
      <!-- UpdateBug Event -->
      <acceptableEvent eventName="UpdateBug" nextStateName="Official Release" />
    </state>

    <!-- RFCSolutionDelivered -->
    <state stateName="RFC Solution Delivered">
      <!-- ActivateRFC Event -> WorkingOnRFC State -->
      <acceptableEvent eventName="ActivateRFC" nextStateName="Working On RFC" visible="{Status}=='Resolved'" />
      <!-- CloseRFx Event -> RFxClosed State -->
      <acceptableEvent eventName="CloseRFx" nextStateName="RFx Closed" visible="{Status}=='Resolved'" />
      <!-- UpdateBug Event -->
      <acceptableEvent eventName="UpdateBug" nextStateName="RFC Solution Delivered" />
    </state>

    <!-- RFxRejected State -->
    <state stateName="RFx Rejected">
      <!-- CloseRFx Event -> RFxClosed State -->
      <acceptableEvent eventName="CloseRFx" nextStateName="RFx Closed" visible="{Status}=='Resolved'" />
    </state>
  </states>

  <!-- End States -->
  <endStates>
    <!-- RFxClosed State -->
    <state stateName="RFx Closed" />
  </endStates>

  <events>
    <!-- RequireMoreInformation Event -->
    <event eventName="RequireMoreInformation" displayName="Require More Information">
      <field name="BugOwner" implicit="false" isRequired="true">
        <UIDisplay name="Assigned To" type="autoCompleteComboBox" source="EscalationEngineer"/>
      </field>
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="RfxSubmitted" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearDateTime}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- TriageVote Event -->
    <event eventName="TriageVote" displayName="Triage Vote" customUIName="{namespace=customDialogs, class=TriageVote, method=Show}">
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- AssignInvestigation Event -->
    <event eventName="AssignInvestigation" displayName="Assign Investigation">
      <field name="Priority" implicit="false" isRequired="true">
        <UIDisplay name="Priority" type="autoCompleteComboBox" source="PriorityValues" default="true"/>
      </field>
      <field name="BugOwner" implicit="false" isRequired="true">
        <UIDisplay name="Assigned To" type="autoCompleteComboBox" source="PortalUser"/>
      </field>
      <field name="PMOwner" implicit="false" isRequired="true">
        <UIDisplay name="PM Owner" type="autoCompleteComboBox" source="ProgramManager" default="true"/>
      </field>
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="QfeTriageStatus" implicit="true" value="Investigate"/>
      <field name="InvestigationAssignDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="InvestigationDue" implicit="true" value="{namespace=dbAccess, class=DBAccess, method=GetNewInvestigationDue, parameters={{Binding target=BugChangeList, value=TeamId}, {Binding target=BugChangeList, value=BugChanges.Item[data.BugFields:Priority]}}}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- UpdateBug event -->
    <event eventName="UpdateBug" displayName="Update Bug">
      <field name="BugOwner" implicit="false" isRequired="true">
        <UIDisplay name="Assigned To" type="autoCompleteComboBox" source="PortalUser" default="true"/>
      </field>
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- ProvideMoreInformation Event -->
    <event eventName="ProvideMoreInformation" displayName="Provide More Information">
      <field name="BugOwner" implicit="false" isRequired="true">
        <UIDisplay name="Assigned To" type="autoCompleteComboBox" source="PortalUser"/>
      </field>
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="RfxSubmitted" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- AssignTriage Event -->
    <event eventName="AssignTriage" displayName="Assign Triage">
      <field name="BugOwner" implicit="false" isRequired="true">
        <UIDisplay name="Assigned To" type="autoCompleteComboBox" source="SmsSEWar"/>
      </field>
      <field name="QfeTriageStatus" implicit="false" isRequired="true">
        <UIDisplay name="Recommendation" type="radioGroup" source="TriageRecommendationList"/>
      </field>
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- RejectRFx Event -->
    <event eventName="RejectRFx" displayName="Reject RFx">
      <field name="BugOwner" implicit="false" isRequired="true">
        <UIDisplay name="Assigned To" type="autoCompleteComboBox" source="PortalUser"/>
      </field>
      <field name="Resolution" implicit="false" isRequired="true">
        <UIDisplay name="Resolution" type="autoCompleteComboBox" source="ResolutionList"/>
      </field>
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="Resolver" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
      <field name="QfeTriageStatus" implicit="true" value="Not Approved"/>
      <field name="Status" implicit="true" value="Resolved"/>
      <field name="QfeRejectDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="ResolvedDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- AcceptRFC Event -->
    <event eventName="AcceptRFC" displayName="Accept RFC">
      <field name="Priority" implicit="false" isRequired="true">
        <UIDisplay name="Priority" type="autoCompleteComboBox" source="PriorityValues" default="true"/>
      </field>
      <field name="BugOwner" implicit="false" isRequired="true">
        <UIDisplay name="Assigned To" type="autoCompleteComboBox" source="PortalUser"/>
      </field>
      <field name="PMOwner" implicit="false" isRequired="true">
        <UIDisplay name="PM Owner" type="autoCompleteComboBox" source="ProgramManager" default="true"/>
      </field>
      <field name="DevOwner" implicit="false" isRequired="true">
        <UIDisplay name="Dev Owner" type="autoCompleteComboBox" source="Developer" default="true"/>
      </field>
      <field name="TestOwner" implicit="false" isRequired="true">
        <UIDisplay name="Test Owner" type="autoCompleteComboBox" source="Tester" default="true"/>
      </field>
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="QfeTriageStatus" implicit="true" value="Approved"/>
      <field name="QfeAcceptDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="SLADate" implicit="true" value="{namespace=dbAccess, class=DBAccess, method=GetNewSLADate, parameters={{Binding target=BugChangeList, value=TeamId}, {Binding target=BugChangeList, value=BugChanges.Item[data.BugFields:Priority]}}}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- AcceptRFH Event -->
    <event eventName="AcceptRFH" displayName="Accept RFH">
      <field name="Priority" implicit="false" isRequired="true">
        <UIDisplay name="Priority" type="autoCompleteComboBox" source="PriorityValues" default="true"/>
      </field>
      <field name="BugOwner" implicit="false" isRequired="true">
        <UIDisplay name="Assigned To" type="autoCompleteComboBox" source="PortalUser"/>
      </field>
      <field name="PMOwner" implicit="false" isRequired="true">
        <UIDisplay name="PM Owner" type="autoCompleteComboBox" source="ProgramManager" default="true"/>
      </field>
      <field name="DevOwner" implicit="false" isRequired="true">
        <UIDisplay name="Dev Owner" type="autoCompleteComboBox" source="Developer" default="true"/>
      </field>
      <field name="TestOwner" implicit="false" isRequired="true">
        <UIDisplay name="Test Owner" type="autoCompleteComboBox" source="Tester" default="true"/>
      </field>
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="QfeTriageStatus" implicit="true" value="Approved"/>
      <field name="QfeAcceptDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="SLADate" implicit="true" value="{namespace=dbAccess, class=DBAccess, method=GetNewSLADate, parameters={{Binding target=BugChangeList, value=TeamId}, {Binding target=BugChangeList, value=BugChanges.Item[data.BugFields:Priority]}}}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- ResolveRFC Event-->
    <event eventName="ResolveRFC" displayName="Resolve RFC">
      <field name="BugOwner" implicit="false" isRequired="true">
        <UIDisplay name="Assigned To" type="autoCompleteComboBox" source="PortalUser"/>
      </field>
      <field name="Resolution" implicit="false" isRequired="true">
        <UIDisplay name="Resolution" type="autoCompleteComboBox" source="ResolutionList"/>
      </field>
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="ReleaseDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="Resolver" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
      <field name="Status" implicit="true" value="Resolved"/>
      <field name="ResolvedDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- CreateKbArticle Event -->
    <event eventName="CreateKbArticle" displayName="Create Kb Article" customUIName="{namespace=customDialogs, class=CreateNewKB, method=Show}">
      <field name="KbNumber" implicit="true" value="{namespace=serviceOperations, class=SEPortalOperations, method=CreateKbArticle, parameters={{Binding target=BugData, value=TeamId.FieldValue}, {Binding target=BugData, value=BugId.FieldValue}, {Binding target=BugData, value=Title.FieldValue}, {Binding target=BugData, value=Product.FieldValue}, string:SMSSE, {Binding target=TeamInfo, value=KbTemplateXmlFile}, {Binding target=CustomActionParameters, value=CustomActionParameterDict.Item[string:kbNumber]}}}}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- ManageChangelist Event -->
    <event eventName="ManageChangelist" displayName="Manage Changelist" customUIName="{namespace=customDialogs, class=ManageChangelist, method=Show}">
      <field name="CodeReviewStatus" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="PrivateTestStatus" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="RegressionStatus" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- PackCodeChange Event -->
    <event eventName="PackCodeChange" displayName="Pack Code Change" customUIName="{namespace=customDialogs, class=PackCodeChange, method=Show}">
      <field name="PrivateTestStatus" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- RequestCodeReview Event -->
    <event eventName="RequestCodeReview" displayName="Request Code Review" customUIName="{namespace=customDialogs, class=RequestCodeReview, method=Show}">
      <field name="CodeReviewRequestDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="CodeReviewStatus" implicit="true" value="CodeReviewRequested"/>
      <field name="PrivateTestStatus" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="Developer" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- CodeReviewComplete Event -->
    <event eventName="CodeReviewComplete" displayName="Code Review Complete">
      <field name="CodeReviewStatus" implicit="false" isRequired="true">
        <UIDisplay name="Code Review Result" type="radioGroup" source="CodeReviewResultList"/>
      </field>
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="CodeReviewer" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
      <field name="BugOwner" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetStringField, parameters={{Binding target=BugData, value=Developer.FieldValue}}}"/>
      <field name="CodeReviewFinishDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="PrivateTestStatus" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- AssignPrivateTest Event -->
    <event eventName="AssignPrivateTest" displayName="Assign Private Test">
      <field name="BugOwner" implicit="false" isRequired="true">
        <UIDisplay name="Assigned To" type="autoCompleteComboBox" source="PortalUser"/>
      </field>
      <field name="PrivateTester" implicit="false" isRequired="true">
        <UIDisplay name="Private Tester" type="autoCompleteComboBox" source="Tester" default="true"/>
      </field>
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="PrivateTestRequestDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="PrivateTestStatus" implicit="true" value="Buddy Test Available"/>
      <field name="Developer" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- SkipPrivateTest Event -->
    <event eventName="SkipPrivateTest" displayName="Skip Private Test">
      <field name="BugOwner" implicit="false" isRequired="true">
        <UIDisplay name="Assigned To" type="autoCompleteComboBox" source="PortalUser" default="true"/>
      </field>
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="PrivateTestStatus" implicit="true" value="Buddy Test Not Required"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- PrivateTestComplete Event -->
    <event eventName="PrivateTestComplete" displayName="Private Test Complete">
      <field name="PrivateTester" implicit="false" isRequired="true">
        <UIDisplay name="Private Tester" type="autoCompleteComboBox" source="Tester" default="true"/>
      </field>
      <field name="PrivateTestStatus" implicit="false" isRequired="true">
        <UIDisplay name="Private Test Result" type="radioGroup" source="PrivateTestResultList" />
      </field>
      <field name="TestCase" implicit="false" isRequired="true">
        <UIDisplay name="Test Case Id" type="textField" default="true"/>
      </field>
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="BugOwner" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetStringField, parameters={{Binding target=BugData, value=Developer.FieldValue}}}"/>
      <field name="PrivateTestFinishDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- AssignRegressionTest Event -->
    <event eventName="AssignRegressionTest" displayName="Assign Regression Test">
      <field name="BugOwner" implicit="false" isRequired="true">
        <UIDisplay name="Assigned To" type="autoCompleteComboBox" source="PortalUser"/>
      </field>
      <field name="RegressionTester" implicit="false" isRequired="true">
        <UIDisplay name="Regression Tester" type="autoCompleteComboBox" source="Tester" default="true"/>
      </field>
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="RegressionAssignDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="RegressionStatus" implicit="true" value="In Progress"/>
      <field name="Developer" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- RegressionTestComplete Event -->
    <event eventName="RegressionTestComplete" displayName="Regression Test Complete">
      <field name="RegressionTester" implicit="false" isRequired="true">
        <UIDisplay name="Regression Tester" type="autoCompleteComboBox" source="Tester" default="true"/>
      </field>
      <field name="RegressionStatus" implicit="false" isRequired="true">
        <UIDisplay name="Regression Test Result" type="radioGroup" source="RegressionTestResultList"/>
      </field>
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="BugOwner" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetStringField, parameters={{Binding target=BugData, value=Developer.FieldValue}}}"/>
      <field name="RegressionFinishDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- RequestCheckIn Event -->
    <event eventName="RequestCheckIn" displayName="Request Check In" customUIName="{namespace=customDialogs, class=CheckIn, method=Show}">
      <field name="CheckinStatus" implicit="true" value="Requested"/>
      <field name="CheckinRequestDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="Developer" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
      <customAction name="SetCheckInData" action="{namespace=serviceOperations, class=SEPortalOperations_SMS, method=SetCheckInData, parameters={{Binding target=CustomActionParameters, value=CustomActionParameterDict.Item[string:qfeBuildData]}, {Binding target=CustomActionParameters, value=CustomActionParameterDict.Item[string:product]}}"/>
    </event>
    <!-- Approve CheckIn -->
    <event eventName="ApproveCheckIn" displayName="Approve Check In">
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="BugOwner" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetStringField, parameters={{Binding target=BugData, value=Developer.FieldValue}}}"/>
      <field name="CheckinStatus" implicit="true" value="Approved"/>
      <field name="CheckinApproveDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- RejectCheckIn -->
    <event eventName="RejectCheckIn" displayName="Reject Check In">
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="BugOwner" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetStringField, parameters={{Binding target=BugData, value=Developer.FieldValue}}}"/>
      <field name="CheckinStatus" implicit="true" value="Rejected"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- CheckIn Event -->
    <event eventName="CheckIn" displayName="Check In" customUIName="{namespace=customDialogs, class=CheckIn, method=Show}">
      <field name="CheckinStatus" implicit="true" value="Submitted"/>
      <field name="Resolution" implicit="true" value="Fixed"/>
      <field name="Resolver" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
      <field name="ResolvedDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="Status" implicit="true" value="Resolved"/>
      <field name="BuildRequestDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
      <field name="CheckinSubmitDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <customAction name="SetCheckInData" action="{namespace=serviceOperations, class=SEPortalOperations_SMS, method=SetCheckInData, parameters={{Binding target=CustomActionParameters, value=CustomActionParameterDict.Item[string:qfeBuildData]}, {Binding target=CustomActionParameters, value=CustomActionParameterDict.Item[string:product]}}"/>
    </event>
    <!-- ModifyCheckInData Event -->
    <event eventName="ModifyCheckInData" displayName="Modify Check In Data" customUIName="{namespace=customDialogs, class=ModifyCheckInData, method=Show}">
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
      <customAction name="SetCheckInData" action="{namespace=serviceOperations, class=SEPortalOperations_SMS, method=SetCheckInData, parameters={{Binding target=CustomActionParameters, value=CustomActionParameterDict.Item[string:qfeBuildData]}, {Binding target=CustomActionParameters, value=CustomActionParameterDict.Item[string:product]}}"/>
    </event>
    <!-- AssignOfficialBundle Event -->
    <event eventName="AssignOfficialBundle" displayName="Assign Official Bundle">
      <field name="BugOwner" implicit="false" isRequired="true">
        <UIDisplay name="Assigned To" type="autoCompleteComboBox" source="PortalUser"/>
      </field>
      <field name="Builder" implicit="false" isRequired="true">
        <UIDisplay name="Builder" type="autoCompleteComboBox" source="Builder" default="true"/>
      </field>
      <field name="ResolvedBuild" implicit="false" isRequired="true">
        <UIDisplay name="Resolved Build" type="textField" default="true"/>
      </field>
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="BuildFinishDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- BuildFail Event -->
    <event eventName="BuildFail" displayName="Build Fail">
      <field name="BugOwner" implicit="false" isRequired="true">
        <UIDisplay name="Assigned To" type="autoCompleteComboBox" source="PortalUser"/>
      </field>
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="Status" implicit="true" value="Active"/>
      <field name="Resolution" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="Resolver" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="CodeReviewStatus" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="PrivateTestStatus" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="RegressionStatus" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="CheckinStatus" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- AssignBvtTest Event -->
    <event eventName="AssignBvtTest" displayName="Assign Bvt Test">
      <field name="BugOwner" implicit="false" isRequired="true">
        <UIDisplay name="Assigned To" type="autoCompleteComboBox" source="PortalUser"/>
      </field>
      <field name="BVTTester" implicit="false" isRequired="true">
        <UIDisplay name="BVT Tester" type="autoCompleteComboBox" source="Tester" default="true"/>
      </field>
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="BVTAssignDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="BVTStatus" implicit="true" value="In Porgress"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- PrivateBundle Event -->
    <event eventName="PrivateBundle" displayName="Private Bundle" customUIName="{namespace=customDialogs, class=BundleHotfix, method=Show}">
      <field name="Description" implicit="true" value="{namespace=smsCustomAction, class=HotfixBundle, method=BundleHotfix, parameters={{Binding target=BugData, value=TeamId.FieldValue}, {Binding target=BugData, value=BugId.FieldValue}, {Binding target=BugData, value=Product.FieldValue}, {Binding target=BugData, value=KbNumber.FieldValue}, {Binding target=BugData, value=ResolvedBuild.FieldValue}, {Binding target=CustomActionParameters, value=CustomActionParameterDict.Item[string:langList]}, {Binding target=CustomActionParameters, value=CustomActionParameterDict.Item[string:platformList]}, boolean:true}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- BundleHotFix Event -->
    <event eventName="BundleHotfix" displayName="Bundle Hotfix" customUIName="{namespace=customDialogs, class=BundleHotfix, method=Show}">
      <field name="Description" implicit="true" value="{namespace=smsCustomAction, class=HotfixBundle, method=BundleHotfix, parameters={{Binding target=BugData, value=TeamId.FieldValue}, {Binding target=BugData, value=BugId.FieldValue}, {Binding target=BugData, value=Product.FieldValue}, {Binding target=BugData, value=KbNumber.FieldValue}, {Binding target=BugData, value=ResolvedBuild.FieldValue}, {Binding target=CustomActionParameters, value=CustomActionParameterDict.Item[string:langList]}, {Binding target=CustomActionParameters, value=CustomActionParameterDict.Item[string:platformList]}, boolean:false}"/>
      <field name="BundleCreateDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- BundleFail Event -->
    <event eventName="BundleFail" displayName="Bundle Fail">
      <field name="BugOwner" implicit="false" isRequired="true">
        <UIDisplay name="Assigned To" type="autoCompleteComboBox" source="PortalUser"/>
      </field>
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- BvtTestFail Event -->
    <event eventName="BvtTestFail" displayName="Bvt Test Fail">
      <field name="BugOwner" implicit="false" isRequired="true">
        <UIDisplay name="Assigned To" type="autoCompleteComboBox" source="PortalUser"/>
      </field>
      <field name="BVTTester" implicit="false" isRequired="true">
        <UIDisplay name="BVT Tester" type="autoCompleteComboBox" source="Tester" default="true"/>
      </field>
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="BVTStatus" implicit="true" value="Failed"/>
      <field name="Status" implicit="true" value="Active"/>
      <field name="Resolution" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="Resolver" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="CodeReviewStatus" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="PrivateTestStatus" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="RegressionStatus" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="CheckinStatus" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- AssignCodeSign Event -->
    <event eventName="AssignCodeSign" displayName="Assign Code Sign">
      <field name="BugOwner" implicit="false" isRequired="true">
        <UIDisplay name="Assigned To" type="autoCompleteComboBox" source="PortalUser"/>
      </field>
      <field name="BVTTester" implicit="false" isRequired="true">
        <UIDisplay name="BVT Tester" type="autoCompleteComboBox" source="Tester" default="true"/>
      </field>
      <field name="ReleasePM" implicit="false" isRequired="true">
        <UIDisplay name="Release PM" type="autoCompleteComboBox" source="ReleaseManager" default="true"/>
      </field>
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="BVTFinishDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="BVTStatus" implicit="true" value="Passed"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- RequestCodeSign -->
    <event eventName="RequestCodeSign" displayName="Request Code Sign" customUIName="{namespace=customDialogs, class=CodeSign, method=Show}">
      <field name="CodeSignRequestDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- CheckCodeSign -->
    <event eventName="CheckCodeSign" displayName="Check Code Sign" customUIName="{namespace=customDialogs, class=CodeSign, method=Show}">
      <field name="CodeSignFinishDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
      <customAction name="RetrieveCodeSignedFiles" action="{namespace=serviceOperations, class=SEPortalOperations_SMS, method=RetrieveCodeSignedFiles, parameters={{Binding target=CustomActionParameters, value=CustomActionParameterDict.Item[string:retrieveFilePath]}, {Binding target=CustomActionParameters, value=CustomActionParameterDict.Item[string:destinationPath]}}}"/>
    </event>
    <!-- AssignCustomerVerification Event -->
    <event eventName="AssignCustomerVerification" displayName="Assign Customer Verification" customUIName="{namespace=customDialogs, class=AssignCustomerVerification, method=Show}">
      <field name="CodeSignFinishDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="ReleaseDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
      <customAction name="CopyFilesForCustomerVerification" action="{namespace=serviceOperations, class=SEPortalOperations_SMS, method=CopyFilesForCustomerVerification, parameters={{Binding target=CustomActionParameters, value=CustomActionParameterDict.Item[string:copyJobDescXml]}}}"/>
    </event>
    <!-- CustomerVerificationFail Event -->
    <event eventName="CustomerVerificationFail" displayName="Customer Verification Fail">
      <field name="BugOwner" implicit="false" isRequired="true">
        <UIDisplay name="Assigned To" type="autoCompleteComboBox" source="PortalUser"/>
      </field>
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="Status" implicit="true" value="Active"/>
      <field name="Resolution" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="Resolver" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="CodeReviewStatus" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="PrivateTestStatus" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="RegressionStatus" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="CheckinStatus" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="BVTStatus" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- AssignOfficialRelease Event -->
    <event eventName="AssignOfficialRelease" displayName="Assign Official Release">
      <field name="BugOwner" implicit="false" isRequired="true">
        <UIDisplay name="Assigned To" type="autoCompleteComboBox" source="PortalUser"/>
      </field>
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="CustomerVerifyFinishDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- ActivateRFC Event -->
    <event eventName="ActivateRFC" displayName="Activate RFC">
      <field name="BugOwner" implicit="false" isRequired="true">
        <UIDisplay name="Assigned To" type="autoCompleteComboBox" source="PortalUser"/>
      </field>
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="Status" implicit="true" value="Active"/>
      <field name="Resolution" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="Resolver" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=ClearString}"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- CloseRFx Event -->
    <event eventName="CloseRFx" displayName="Close RFx">
      <field name="Description" implicit="false" isRequired="true">
        <UIDisplay name="Comment" type="textArea"/>
      </field>
      <field name="BugOwner" implicit="true" value="Closed"/>
      <field name="ClosedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
      <field name="CloseDate" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetCurrentDateTime}"/>
      <field name="Status" implicit="true" value="Closed"/>
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
    </event>
    <!-- UploadHotfix Event -->
    <event eventName="UploadHotfix" displayName="Upload Hotfix" customUIName="{namespace=customDialogs, class=UploadHotfix, method=Show}">
      <field name="ChangedBy" implicit="true" value="{namespace=dbAccess, class=SEPortalOperations, method=GetNewChangedBy}"/>
      <customAction name="UploadHotfix" action="{namespace=serviceOperations, class=SEPortalOperations, method=UploadHotfix, parameters={{Binding target=CustomActionParameters, value=CustomActionParameterDict.Item[string:hotfixUploadDescXml]}}}"/>
    </event>
    <statelessEvent eventName="ChangeQfeStatus" displayName="Change QFE Status" customUIName="{namespace=customDialogs, class=ChangeBugStatusDialog, method=Show}"/>
  </events>
  <resources>
    <resource resourceName="TriageSuggestion" resourceType="static">
      <item text="Accept" value="Accept"/>
      <item text="Reject" value="Reject"/>
      <item text="Investigate" value="Investigate"/>
      <item text="Discuss" value="Discuss"/>
    </resource>
    <resource resourceName="PriorityValues" resourceType="static">
      <item text="1" value="1"/>
      <item text="2" value="2"/>
      <item text="3" value="3"/>
      <item text="4" value="4"/>
    </resource>
    <resource resourceName="TriageRecommendationList" resourceType="static">
      <item text="Recommended Approve" value="Recommended Approve"/>
      <item text="Recommended Reject" value="Recommended Reject"/>
    </resource>
    <resource resourceName="ResolutionList" resourceType="static">
      <item text="By Design" value="By Design"/>
      <item text="Duplicate" value="Duplicate"/>
      <item text="External" value="External"/>
      <item text="Fixed" value="Fixed"/>
      <item text="Not Repro" value="Not Repro"/>
      <item text="Postponed" value="Postponed"/>
      <item text="Won't Fix" value="Won't Fix"/>
    </resource>
    <resource resourceName="CodeReviewResultList" resourceType="static">
      <item text="Pass" value="CodeReviewPassed"/>
      <item text="Fail" value="CodeReviewChangesNeeded"/>
    </resource>
    <resource resourceName="PrivateTestResultList" resourceType="static">
      <item text="Pass" value="Buddy Test Passed"/>
      <item text="Fail" value="Buddy Test Failed"/>
    </resource>
    <resource resourceName="RegressionTestResultList" resourceType="static">
      <item text="Pass" value="Pass"/>
      <item text="Fail" value="Fail"/>
    </resource>
    <resource resourceName="CheckInCause" resourceType="static">
      <item text="Bug fix (regression)" value="Bug fix (regression)"/>
      <item text="Change (external)" value="Change (external)"/>
      <item text="Dev Error" value="Dev Error"/>
      <item text="Dev Missing Code" value="Dev Missing Code"/>
      <item text="Dev Special Case" value="Dev Special Case"/>
      <item text="NYI" value="NYI"/>
      <item text="Other" value="Other"/>
      <item text="Spec Change" value="Spec Change"/>
      <item text="Spec Flaw" value="Spec Flaw"/>
      <item text="Spec Incomplete" value="Spec Incomplete"/>
    </resource>
    <resource resourceName="SmsSEWar" resourceType="static">
      <item text="smssewar" value="smssewar"/>
    </resource>
    <resource resourceName="PortalUser" resourceType="dynamic" value="{namespace=dbAccess, class=DBAccess, method=GetAllPortalUser, parameters={{Binding target=TeamInfo, value=TeamId}}}"/>
    <resource resourceName="PortalAdministrator" resourceType="dynamic" value="{namespace=dbAccess, class=DBAccess, method=GetAllPortalAdministrator, parameters={{Binding target=TeamInfo, value=TeamId}}}"/>
    <resource resourceName="ProgramManager" resourceType="dynamic" value="{namespace=dbAccess, class=DBAccess, method=GetAllProgramManager, parameters={{Binding target=TeamInfo, value=TeamId}}}"/>
    <resource resourceName="Developer" resourceType="dynamic" value="{namespace=dbAccess, class=DBAccess, method=GetAllDeveloper, parameters={{Binding target=TeamInfo, value=TeamId}}}"/>
    <resource resourceName="Tester" resourceType="dynamic" value="{namespace=dbAccess, class=DBAccess, method=GetAllTester, parameters={{Binding target=TeamInfo, value=TeamId}}}"/>
    <resource resourceName="Builder" resourceType="dynamic" value="{namespace=dbAccess, class=DBAccess, method=GetAllBuilder, parameters={{Binding target=TeamInfo, value=TeamId}}}"/>
    <resource resourceName="EscalationEngineer" resourceType="dynamic" value="{namespace=dbAccess, class=DBAccess, method=GetAllEscalationEngineer, parameters={{Binding target=TeamInfo, value=TeamId}}}"/>
    <resource resourceName="ReleaseManager" resourceType="dynamic" value="{namespace=dbAccess, class=DBAccess, method=GetAllReleaseManager, parameters={{Binding target=TeamInfo, value=TeamId}}}"/>
    <resource resourceName="KBWriter" resourceType="dynamic" value="{namespace=dbAccess, class=DBAccess, method=GetAllKBWriter, parameters={{Binding target=TeamInfo, value=TeamId}}}"/>
    <resource resourceName="CodeSignApprover" resourceType="dynamic" value="{namespace=dbAccess, class=DBAccess, method=GetAllCodeSignApprover, parameters={{Binding target=TeamInfo, value=TeamId}}}"/>
    <resource resourceName="SourceDepots" resourceType="dynamic" value="{namespace=dbAccess, class=DBAccess, method=GetSourceDepotList, parameters={{Binding target=TeamInfo, value=TeamId}}}"/>
  </resources>
</stateProcess>
